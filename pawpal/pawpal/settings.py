"""
Django settings for pawpal project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1*k4!o(+480)7hj(nqpfh$v1h6rw7#%d^y!otxdl+vo@bc6z4e' # โปรดเปลี่ยนคีย์นี้ในการใช้งานจริง

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',  # Your application
    'django.contrib.sites', # Required by allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # For Google provider
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', # Added AccountMiddleware for allauth
]

ROOT_URLCONF = 'pawpal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Ensure this path is correct
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', # Important for allauth
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'myapp.context_processors.favorite_count', # Your custom context processor
            ],
        },
    },
]

WSGI_APPLICATION = 'pawpal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us' # หรือ 'th' หากต้องการภาษาไทยเป็นหลัก

TIME_ZONE = 'Asia/Bangkok'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
# STATIC_ROOT = BASE_DIR / "staticfiles" # Uncomment for production if using collectstatic

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Media files (User uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Django Allauth settings
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', # Needed to login by username in Django admin
    'allauth.account.auth_backends.AuthenticationBackend', # `allauth` specific authentication methods
]

SITE_ID = 1 # Django-allauth needs this

# --- Key Allauth Settings for Username & Email ---
# ACCOUNT_AUTHENTICATION_METHOD = 'username_email' # Deprecated
ACCOUNT_LOGIN_METHODS = ['username', 'email'] # New setting for login methods
ACCOUNT_LOGIN_BY_USERNAME = True # Explicitly allow login by username
ACCOUNT_LOGIN_BY_EMAIL = True    # Explicitly allow login by email

# ACCOUNT_EMAIL_REQUIRED = True                   # Deprecated
# ACCOUNT_USERNAME_REQUIRED = True                # Deprecated
# ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True      # Deprecated
# Replace the above three with ACCOUNT_SIGNUP_FIELDS
ACCOUNT_SIGNUP_FIELDS = ['username*', 'email*', 'password*'] # '*' means required. 'password1*' and 'password2*' will be handled if password_confirmation is needed.
# If you want password confirmation, allauth will handle it by default if password input is present.
# You can customize further if you have a custom signup form.

ACCOUNT_UNIQUE_USERNAME = True                  # Ensures usernames are unique
ACCOUNT_EMAIL_VERIFICATION = 'none'             # Options: 'none', 'optional', 'mandatory'
ACCOUNT_SESSION_REMEMBER = True                 # Remember user session
ACCOUNT_UNIQUE_EMAIL = True                     # Ensures emails are unique


# Logout configuration
ACCOUNT_LOGOUT_ON_GET = True                    # Logout directly on GET request to logout URL

# Email backend (for development, prints emails to console)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Custom Forms (ถ้ามี)
# ACCOUNT_SIGNUP_FORM_CLASS = 'myapp.forms.CustomSignupForm' # ตัวอย่างถ้าคุณมี custom signup form
# ACCOUNT_ADAPTER = 'myapp.adapter.MyAccountAdapter' # If you have a custom adapter
# SOCIALACCOUNT_ADAPTER = 'myapp.adapter.MySocialAccountAdapter' # If you have a custom social adapter

LOGIN_REDIRECT_URL = 'home' # Page to redirect to after successful login
LOGOUT_REDIRECT_URL = 'home' # Page to redirect to after successful logout

# Social Account Settings (Google example)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True, # Recommended for security
    }
}
# SOCIALACCOUNT_LOGIN_ON_GET = True # No longer recommended, use provider_login_url template tag with POST