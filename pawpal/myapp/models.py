# ‡πÉ‡∏ô work/dsi202/pawpal/myapp/models.py

from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from django.core.exceptions import ValidationError # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ ValidationError

class Pet(models.Model):
    is_adopted = models.BooleanField(default=False) # ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    PET_TYPE_CHOICES = [
        ('dog', 'Dog'),
        ('cat', 'Cat'),
    ]
    GENDER_CHOICES = [
        ('male', 'Male'),
        ('female', 'Female'),
    ]

    name = models.CharField(max_length=100)
    breed = models.CharField(max_length=100)
    # ‡∏õ‡∏£‡∏±‡∏ö default ‡∏Ç‡∏≠‡∏á age ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô CharField
    age = models.CharField(max_length=100, default='Unknown') # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô default ‡∏à‡∏≤‡∏Å False
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES)
    personality = models.CharField(max_length=200)
    story = models.TextField(blank=True)
    vaccinated = models.BooleanField(default=False)
    disability = models.CharField(max_length=100, blank=True)
    photo = models.ImageField(upload_to='pets/', blank=True, null=True)
    pet_type = models.CharField(max_length=10, choices=PET_TYPE_CHOICES)
    detail = models.CharField(max_length=200, blank=True)
    favorited_by = models.ManyToManyField(User, related_name='favorite_pets', blank=True)

    def __str__(self):
        return self.name


class DonationCase(models.Model):
    case_id = models.CharField(max_length=10, unique=True)
    pet = models.ForeignKey(Pet, on_delete=models.CASCADE, related_name='donation_cases')
    title = models.CharField(max_length=255)
    description = models.TextField()
    hospital = models.CharField(max_length=100, blank=True)
    amount_needed = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    amount_raised = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    image = models.ImageField(upload_to='donations/', blank=True, null=True)
    # ‡∏•‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå qr_code_image ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DonationCase
    # qr_code_image = models.ImageField(upload_to='qr_codes/', blank=True, null=True) # ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

    def __str__(self):
        return f"{self.case_id} - {self.title}"

# ‡πÄ‡∏û‡∏¥‡πà‡∏° Model ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö QR Code ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á
class DonationSettings(models.Model):
    promptpay_qr_code = models.ImageField(
        upload_to='site_settings/qr_codes/', # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô path ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå
        blank=True,
        null=True,
        verbose_name="PromptPay QR Code Image"
    )

    class Meta:
        verbose_name = "Donation Settings"
        verbose_name_plural = "Donation Settings"

    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 instance
    def clean(self):
        if not self.pk and DonationSettings.objects.exists():
            raise ValidationError("Can only have one Donation Settings instance.")

    def save(self, *args, **kwargs):
        self.clean() # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å clean ‡∏Å‡πà‡∏≠‡∏ô save ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î
        super().save(*args, **kwargs)

    def __str__(self):
        return "Donation Settings"


class Product(models.Model):
    name = models.CharField(max_length=100)
    image = models.ImageField(upload_to='products/')

class AboutContent(models.Model):
    """‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ About Us"""
    what_we_do_title = models.CharField(max_length=100, default="What we do?")
    what_we_do_content = models.TextField(default="At PawPal, we rescue, care for and rehome stray dogs and cats.")
    what_we_do_content2 = models.TextField(default="We work with kind-hearted volunteers and loving adopters to give every furry friend a second chance at life.")
    tagline = models.TextField(default="From street to sofa ‚Äî we're here for every paw. üêæ")

    why_we_do_title = models.CharField(max_length=100, default="Why we do it?")
    why_we_do_content = models.TextField(default="We believe every dog and cat deserves love, safety, and a place to call home. No paw should be left behind.")
    why_we_do_content2 = models.TextField(default="We do this because they can't ask for help ‚Äî but we can help them. ‚ù§Ô∏è")

    class Meta:
        verbose_name = "About Us Content"
        verbose_name_plural = "About Us Content"

class PetStatistics(models.Model):
    """‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á"""
    stats_title = models.CharField(max_length=100, default="Hope in Numbers")
    treated_count = models.IntegerField(default=200)
    treated_label = models.CharField(max_length=100, default="Sick and injured animals treated")

    adopted_count = models.IntegerField(default=99)
    adopted_label = models.CharField(max_length=100, default="Animals adopted to new homes")

    neutered_count = models.IntegerField(default=112)
    neutered_label = models.CharField(max_length=100, default="Animals neutered and vaccinated")

    class Meta:
        verbose_name = "Pet Statistics"
        verbose_name_plural = "Pet Statistics"


class BlogPost(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField(blank=True)
    image = models.ImageField(upload_to='blog_images/', null=True, blank=True)
    is_new = models.BooleanField(default=False)
    url = models.URLField(max_length=5000, blank=True, null=True)
    slug = models.SlugField(unique=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title

class ContactInfo(models.Model):
    """‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"""
    phone = models.CharField(max_length=20, default="1212312121")
    opening_hours = models.TextField(default="mon - fri (9:00 - 18:00)")
    closing_days = models.CharField(max_length=100, default="close every 2nd sun")
    description = models.TextField(default="‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡∏ß‡∏à‡∏£‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")

    class Meta:
        verbose_name = "Contact Information"
        verbose_name_plural = "Contact Information"

class YourModel(models.Model):
    your_url = models.URLField(max_length=5000)

class UserFavorite(models.Model):
    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)
    pet = models.ForeignKey(Pet, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'pet')


# work/dsi202/pawpal/myapp/models.py

from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from django.core.exceptions import ValidationError
from django.db.models import F # ‡πÄ‡∏û‡∏¥‡πà‡∏° F object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö atomic updates

# ... (Pet, DonationCase, DonationSettings, etc.) ...
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ PetStatistics ‡∏ñ‡∏π‡∏Å import ‡πÅ‡∏•‡πâ‡∏ß
# from .models import PetStatistics # ‡∏ñ‡πâ‡∏≤ PetStatistics ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á import ‡∏ã‡πâ‡∏≥

class AdoptionApplication(models.Model):
    # ... (fields ‡∏Ç‡∏≠‡∏á AdoptionApplication ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    address = models.CharField(max_length=255)
    subdistrict = models.CharField(max_length=100, blank=True, null=True)
    district = models.CharField(max_length=100, blank=True, null=True)
    province = models.CharField(max_length=100, blank=True, null=True)
    postal_code = models.CharField(max_length=20, blank=True, null=True)
    phone_number = models.CharField(max_length=20, blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    household = models.TextField(blank=True, null=True)
    other_pets = models.TextField(blank=True, null=True)
    property_description = models.TextField(blank=True, null=True)
    job_working_hours = models.CharField(max_length=255, blank=True, null=True)
    motivation = models.TextField(blank=True, null=True)
    apply_date = models.DateTimeField(auto_now_add=True)
    is_approved = models.BooleanField(default=False)
    pets = models.ManyToManyField(Pet, related_name='applications')

    def save(self, *args, **kwargs):
        print(f"\n--- AdoptionApplication save START (ID: {self.pk}) ---")
        
        old_is_approved = None
        is_new_application = self.pk is None # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

        if not is_new_application: # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            try:
                old_instance = AdoptionApplication.objects.get(pk=self.pk)
                old_is_approved = old_instance.is_approved
                print(f"  Old approval status for App ID {self.pk}: {old_is_approved}")
            except AdoptionApplication.DoesNotExist:
                print(f"  Warning: App ID {self.pk} provided, but old instance not found during save.")
                # ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤ object ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÅ‡∏ï‡πà‡∏°‡∏µ pk ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å default (False)
                old_is_approved = False # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡πà‡∏≤‡∏Ñ‡∏∑‡∏≠ False
        else: # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡πÉ‡∏´‡∏°‡πà
            old_is_approved = False # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á object ‡πÉ‡∏´‡∏°‡πà (‡∏Å‡πà‡∏≠‡∏ô save ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å) ‡∏Ñ‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà approved
            print(f"  New application is being processed.")

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å super().save() ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ self.pk ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞ self.pets.all() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        super().save(*args, **kwargs)
        print(f"  AdoptionApplication (ID: {self.pk}) saved. Current is_approved: {self.is_approved}")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ is_approved
        approval_newly_granted = old_is_approved is False and self.is_approved is True
        approval_newly_revoked = old_is_approved is True and self.is_approved is False

        pets_in_application = self.pets.all() # ‡∏î‡∏∂‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å save ‡πÅ‡∏•‡πâ‡∏ß

        if approval_newly_granted:
            print(f"  Approval GRANTED for Application ID: {self.pk}. Processing pets...")
            pets_marked_adopted_count = 0
            for pet in pets_in_application:
                if not pet.is_adopted:
                    pet.is_adopted = True
                    pet.save()
                    pets_marked_adopted_count += 1
                    print(f"    Pet ID: {pet.id} (Name: {pet.name}) marked as adopted.")
                else:
                    print(f"    Pet ID: {pet.id} (Name: {pet.name}) was ALREADY adopted. Skipping.")
            
            if pets_marked_adopted_count > 0:
                stats, created = PetStatistics.objects.get_or_create(pk=1) # ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ get stats
                stats.adopted_count = F('adopted_count') + pets_marked_adopted_count
                stats.save()
                stats.refresh_from_db()
                print(f"    PetStatistics.adopted_count INCREASED by {pets_marked_adopted_count}. New count: {stats.adopted_count}")

        elif approval_newly_revoked:
            print(f"  Approval REVOKED for Application ID: {self.pk}. Reverting pet status...")
            pets_reverted_count = 0
            for pet in pets_in_application:
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å approve, ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á is_adopted ‡πÄ‡∏õ‡πá‡∏ô False
                # ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å adopt ‡πÇ‡∏î‡∏¢ application ‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πá‡∏ï‡∏≤‡∏°
                # ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ logic ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ application ‡∏ï‡πà‡∏≠ 1 ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
                # ‡πÅ‡∏ï‡πà‡∏ï‡∏≤‡∏° flow ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô 1 ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ñ‡∏π‡∏Å adopt ‡πÇ‡∏î‡∏¢ 1 application ‡∏ó‡∏µ‡πà approved ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                if pet.is_adopted: # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å adopted (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÇ‡∏î‡∏¢ application ‡∏ô‡∏µ‡πâ)
                    pet.is_adopted = False
                    pet.save()
                    pets_reverted_count += 1
                    print(f"    Pet ID: {pet.id} (Name: {pet.name}) reverted to NOT adopted.")
                else:
                    print(f"    Pet ID: {pet.id} (Name: {pet.name}) was ALREADY NOT adopted. Skipping.")

            if pets_reverted_count > 0:
                stats, created = PetStatistics.objects.get_or_create(pk=1)
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ adopted_count ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                current_adopted_count = stats.adopted_count
                new_adopted_count = max(0, current_adopted_count - pets_reverted_count) # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                stats.adopted_count = new_adopted_count
                # ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏ä‡πâ stats.adopted_count = F('adopted_count') - pets_reverted_count ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ F() object ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                # stats.adopted_count = F('adopted_count') - pets_reverted_count
                stats.save()
                stats.refresh_from_db()
                print(f"    PetStatistics.adopted_count DECREASED by {pets_reverted_count} (from {current_adopted_count} to {new_adopted_count}). Current count: {stats.adopted_count}")
        else:
            print(f"  No change in approval status relevant to pet adoption status for App ID: {self.pk}. (is_approved: {self.is_approved}, old_is_approved: {old_is_approved})")

        print(f"--- AdoptionApplication save END (ID: {self.pk}) ---\n")

    def __str__(self):
        return f"Application by {self.first_name} {self.last_name} on {self.apply_date.strftime('%Y-%m-%d')}"

    def __str__(self):
        return f"Application by {self.first_name} {self.last_name} on {self.apply_date.strftime('%Y-%m-%d')}"

# ... (DonationRecord ‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ) ...
    # ‡πÉ‡∏ô myapp/models.py

# ‡πÄ‡∏û‡∏¥‡πà‡∏° import User ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
from django.contrib.auth.models import User

class DonationRecord(models.Model):
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ: ‡πÄ‡∏û‡∏¥‡πà‡∏° null=True, blank=True ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô on_delete ‡πÄ‡∏õ‡πá‡∏ô models.SET_NULL ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    donation_case = models.ForeignKey(
        DonationCase, 
        on_delete=models.SET_NULL,  # ‡∏´‡∏£‡∏∑‡∏≠ models.PROTECT ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        null=True, 
        blank=True, 
        related_name='records'
    )
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    payment_method = models.CharField(max_length=50)
    slip_image = models.ImageField(upload_to='donation_slips/')
    donated_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        if self.donation_case:
            return f"‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ {self.amount} ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏™ {self.donation_case.case_id}"
        else:
            return f"‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ {self.amount} ‡∏ö‡∏≤‡∏ó ‡πÇ‡∏î‡∏¢ {self.user.username if self.user else '‡∏ú‡∏π‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏≠‡∏≠‡∏Å‡∏ô‡∏≤‡∏°'}"
